library(dplyr)
library(plotrix)
setwd("C:/Users/mauri/Introdução_R")
df <- read.csv("exemplo_notas_si.csv")
# setwd("C:/Users/mauri/Introdução_R")
df <- read.csv("exemplo_notas_si.csv")
setwd("C:/Users/mauri/Introdução_R/relatorio_disciplinas/")
df <- read.csv("exemplo_notas_si.csv")
setwd("C:/Users/mauri/Introdução_R/relatorio_disciplinas")
df <- read.csv("exemplo_notas_si.csv")
setwd("C:/Users/mauri/Introdução_R/relatorio_disciplinas")
df <- read.csv("Introdução_R/exemplo_notas_si.csv")
setwd("C:/Users/mauri/Introdução_R/relatorio_disciplinas")
df <- read.csv("../exemplo_notas_si.csv")
notas_10 <- df %>% filter(nota == 10)
print(notas_10)
notas_sistemas_distribuidos <- df %>%
filter(disciplina == "SISTEMAS DISTRIBUIDOS") %>%
arrange(desc(nota))
print(notas_sistemas_distribuidos)
# Calcular a média das notas por disciplina
media_notas <- aggregate(nota ~ disciplina, data = df, FUN = mean)
View(media_notas)
disciplina_com_maior_media <- media_notas[which.max(media_notas$nota), ]
print(disciplina_com_maior_media)
disciplina_com_menor_media <- media_notas[which.min(media_notas$nota), ]
print(disciplina_com_menor_media)
quantidade_alunos_por_disciplina <- aggregate(nota ~ disciplina, data = df, FUN = length)
colnames(quantidade_alunos_por_disciplina)[2] <- "quantidade_alunos"
View(quantidade_alunos_por_disciplina)
disciplina_maior_quantidade_alunos <- quantidade_alunos_por_disciplina[which.max(quantidade_alunos_por_disciplina$quantidade_alunos), ]
print(disciplina_maior_quantidade_alunos)
disciplina_menor_quantidade_alunos <- quantidade_alunos_por_disciplina[which.min(quantidade_alunos_por_disciplina$quantidade_alunos), ]
print(disciplina_menor_quantidade_alunos)
calcula_resultado <- function(media) {
ifelse(media >= 5, 'APROVADO', 'REPROVADO')
}
df$resultado <- calcula_resultado(df$nota)
taxa_aprovacao_por_disciplina <- aggregate(resultado ~ disciplina, data = df, FUN = function(x) mean(x == 'APROVADO') * 100)
colnames(taxa_aprovacao_por_disciplina) <- c('disciplina', 'taxa_aprovacao')
print(taxa_aprovacao_por_disciplina)
max_percentual_aprovacao <- max(taxa_aprovacao_por_disciplina$taxa_aprovacao)
disciplinas_maior_aprovacao <- taxa_aprovacao_por_disciplina[taxa_aprovacao_por_disciplina$taxa_aprovacao == max_percentual_aprovacao, ]
print(disciplinas_maior_aprovacao)
min_percentual_aprovacao <- min(taxa_aprovacao_por_disciplina$taxa_aprovacao)
disciplinas_menor_aprovacao <- taxa_aprovacao_por_disciplina[taxa_aprovacao_por_disciplina$taxa_aprovacao == min_percentual_aprovacao, ]
print(disciplinas_menor_aprovacao)
contagem <- table(df$resultado)
png(file = "grafico.png")
cores <- c("green", "red")
pie3D(contagem, labels = paste(names(contagem), "(", round(100*contagem/sum(contagem), 1), "%)"), col = cores, explode = 0.4)
title(main = "Taxa de Aprovação", font.main = 1, col.main = "blue")
legend("topright", legend = names(contagem), fill = cores, title = "Resultado", cex = 0.8)
dev.off()
contagem <- table(df$resultado)
png(file = "grafico.png")
cores <- c("green", "red")
pie3D(contagem, "(", round(100*contagem/sum(contagem), 1), "%)"), col = cores, explode = 0.4)
contagem <- table(df$resultado)
png(file = "grafico.png")
cores <- c("green", "red")
pie3D(contagem, labels = NULL, "(", round(100*contagem/sum(contagem), 1), "%)"), col = cores, explode = 0.4)
contagem <- table(df$resultado)
png(file = "grafico.png")
cores <- c("green", "red")
pie3D(contagem, labels = NULL, col = cores, explode = 0.4)
title(main = "Taxa de Aprovação", font.main = 1, col.main = "blue")
legend("topright", legend = names(contagem), fill = cores, title = "Resultado", cex = 0.8)
dev.off()
contagem <- table(df$resultado)
png(file = "grafico.png")
cores <- c("green", "red")
pie3D(contagem, labels = labels = paste(round(100*prop.table(contagem), 1), "%"), col = cores, explode = 0.4)
contagem <- table(df$resultado)
png(file = "grafico.png")
cores <- c("green", "red")
pie3D(contagem, labels = paste(round(100*prop.table(contagem), 1), "%"), col = cores, explode = 0.4)
title(main = "Taxa de Aprovação", font.main = 1, col.main = "blue")
legend("topright", legend = names(contagem), fill = cores, title = "Resultado", cex = 0.8)
dev.off()
